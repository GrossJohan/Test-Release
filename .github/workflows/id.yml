name: Pivotal Tracker Story Type and Release

on:
  push:
    branches:
      - main

jobs:
  e2e_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine Application Port
        id: get_app_port
        run: |
          if [ -f .env ]; then
            app_port=$(grep -Eo 'PORT[[:space:]]*=[[:space:]]*[0-9]+' .env | cut -d '=' -f 2)
          else
            app_port=3000
          fi
          echo "Determined Application Port: $app_port"
          echo "::set-output name=app_port::$app_port"

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          wait-on: "http://localhost:${{ steps.get_app_port.outputs.app_port }}"

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: [ e2e_test ]

    steps:
      - name: Checkout code for Release
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Node.js for Release
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies for Release
        run: npm install

      - name: Get Commit Message
        id: get_commit_message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "::set-output name=commit_message::$commit_message"

      - name: Extract Story ID
        id: extract_story_id
        run: |
          commit_message="${{ steps.get_commit_message.outputs.commit_message }}"
          story_id=$(echo "$commit_message" | grep -oP '#\d+' | sed 's/#//')
          echo "::set-output name=story_id::$story_id"

      - name: Make API Request to Pivotal Tracker
        id: pivotal_api_request
        run: |
          story_id="${{ steps.extract_story_id.outputs.story_id }}"
          pivotal_token="${{ secrets.PIVOTAL_TOKEN }}"
          project_id="${{ secrets.PIVOTAL_PROJECT_ID }}"
          response=$(curl -s -H "X-TrackerToken: $pivotal_token" \
              "https://www.pivotaltracker.com/services/v5/projects/$project_id/stories/$story_id")
          story_type=$(echo "$response" | jq -r '.story_type')
          echo "Pivotal Tracker Story Type: $story_type"
          echo "::set-output name=story_type::$story_type"

      - name: Create Release
        if: success() && (steps.pivotal_api_request.outputs.story_type == 'feature' || steps.pivotal_api_request.outputs.story_type == 'bug')
        run: |
          echo "Creating a release..."

      - name: Get Version for Release
        id: package_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          draft: false
          prerelease: false

      - name: Output Release URL
        if: steps.create_release.outputs.html_url
        run: echo "Release URL is ${{ steps.create_release.outputs.html_url }}"
